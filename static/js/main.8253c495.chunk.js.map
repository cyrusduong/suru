{"version":3,"sources":["components/Toolbar.tsx","components/Header.tsx","components/subcomponents/ListItem.tsx","components/List.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Toolbar","onExportClicked","onImportClicked","className","OverlayTrigger","overlay","Tooltip","id","key","placement","ref","triggerHandler","Button","aria-label","variant","onClick","Header","today","moment","format","ListItem","item","handleActionClicked","description","dueDate","isDone","completedDate","ListGroupItem","List","todoItems","setTodoItems","doneItems","setDoneItems","useState","todoValue","setTodoValue","handleAddTodoClicked","newItem","uid","tags","handleDoneClicked","now","valueOf","filter","doneItem","handleRedoClicked","redoItem","undefined","numDoneVisible","length","InputGroup","FormControl","placeholder","onKeyPress","e","onChange","event","target","value","Append","disabled","ListGroup","map","slice","FileSaver","require","App","useEffect","window","onbeforeunload","inputImportRef","useRef","handleFilesUploaded","a","filesList","current","files","text","json","todoList","JSON","parse","handleExportClicked","useCallback","stringify","blob","Blob","type","saveAs","click","handleImportClicked","accept","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8253c495.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { AiOutlineDownload, AiOutlineUpload } from 'react-icons/ai';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Tooltip from \"react-bootstrap/Tooltip\";\r\n\r\ninterface ToolbarProps {\r\n  onExportClicked: Function,\r\n  onImportClicked: Function\r\n}\r\n\r\nconst Toolbar = ({ onExportClicked, onImportClicked }: ToolbarProps) => {\r\n  return <div className=\"toolbar flex-container-right\">\r\n    {/* These will be reversed because it is flex reverse */}\r\n    <OverlayTrigger\r\n      overlay={<Tooltip id=\"tooltip-export\">Export</Tooltip>}\r\n      key=\"tooltip-export\"\r\n      placement=\"bottom\"\r\n    >\r\n      {({ ref, ...triggerHandler }) => (\r\n        <Button\r\n          aria-label=\"export\"\r\n          variant=\"link\"\r\n          onClick={() => { onExportClicked() }}\r\n          {...triggerHandler}\r\n        >\r\n          <div ref={ref}>\r\n            <AiOutlineDownload />\r\n          </div>\r\n        </Button>\r\n      )}\r\n    </OverlayTrigger>\r\n\r\n    <OverlayTrigger\r\n      overlay={<Tooltip id=\"tooltip-import\">Import</Tooltip>}\r\n      key=\"tooltip-import\"\r\n      placement=\"bottom\"\r\n    >\r\n      {({ ref, ...triggerHandler }) => (\r\n        <Button\r\n          aria-label=\"import\"\r\n          variant=\"link\"\r\n          onClick={() => { onImportClicked() }}\r\n          {...triggerHandler}\r\n        >\r\n          <div ref={ref}>\r\n            <AiOutlineUpload />\r\n          </div>\r\n        </Button>\r\n      )}\r\n    </OverlayTrigger>\r\n  </div>;\r\n}\r\n\r\nexport default Toolbar;","import React from 'react';\r\nimport moment from 'moment';\r\n\r\nconst Header = () => {\r\n  const today = moment().format('MMM Do, YYYY');\r\n\r\n  return (<div className=\"header flex-container-center\">\r\n    <h1 className=\"title\">する (Suru) - To do</h1>\r\n    <h2 className=\"fira thin\">It is: <span className=\"today-font\">{today}</span></h2>\r\n  </div>);\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport moment from 'moment';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\r\n\r\nimport { TodoItem } from '../List';\r\n\r\ninterface ListItemProps {\r\n  item: TodoItem\r\n  handleActionClicked: Function\r\n}\r\n\r\nconst ListItem = ({ item, handleActionClicked }: ListItemProps) => {\r\n  const {\r\n    id,\r\n    description,\r\n    dueDate,\r\n    isDone,\r\n    completedDate\r\n  } = item;\r\n\r\n  return (\r\n    <ListGroupItem key={id} className={isDone ? \"redo-item\" : \"todo-item\"} >\r\n      <div className=\"flex todo-item-primary\">\r\n        {!isDone ? <p className=\"todo-desc margin-0\">{description}</p>\r\n          : <p className=\"done-desc margin-0\">{description}</p>}\r\n        <Button\r\n          variant={!isDone ? \"outline-primary\" : \"outline-secondary\"}\r\n          className=\"todo-done-button\"\r\n          onClick={() => handleActionClicked(id)}\r\n        >\r\n          {!isDone ? \"Done\" : \"Redo\"}\r\n        </Button>\r\n      </div>\r\n      {isDone ? <div className=\"due-date\">Completed: {moment(completedDate).format(\"MMM Do, YYYY - LTS\")}</div>\r\n        : dueDate ? <div className=\"due-date\">Due: {moment(dueDate).format(\"MMM Do YYYY\")}</div>\r\n          : null}\r\n    </ListGroupItem>\r\n  )\r\n}\r\n\r\nexport default ListItem;","import React, { useState } from 'react'\r\nimport uid from 'uid';\r\nimport moment from 'moment';\r\nimport Button from 'react-bootstrap/Button';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport ListItem from './subcomponents/ListItem';\r\n\r\nexport interface TodoItem {\r\n  id: string\r\n  description: string\r\n  isDone: boolean\r\n  dueDate?: number\r\n  completedDate?: number\r\n  tags?: string[]\r\n}\r\n\r\nconst newTodoItem = (description: string, dueDate?: number, tags?: string[]): TodoItem => {\r\n  const id = uid();\r\n\r\n  return {\r\n    id, description, dueDate, tags, isDone: false\r\n  }\r\n}\r\n\r\ninterface ListProps {\r\n  todoItems: TodoItem[],\r\n  setTodoItems: Function,\r\n  doneItems: TodoItem[],\r\n  setDoneItems: Function\r\n}\r\n\r\nconst List = ({ todoItems, setTodoItems, doneItems, setDoneItems }: ListProps) => {\r\n  const [todoValue, setTodoValue] = useState<string>('');\r\n\r\n  const handleAddTodoClicked = () => {\r\n    // Prepend new todo to top of list.\r\n    if (todoValue) {\r\n      const newItem = newTodoItem(todoValue);\r\n\r\n      setTodoItems([newItem, ...todoItems])\r\n\r\n      //Reset value\r\n      setTodoValue('');\r\n    }\r\n  }\r\n\r\n  const handleAddNewTodo = (event: React.KeyboardEvent) => {\r\n    if (event.key === 'Enter') {\r\n      handleAddTodoClicked();\r\n    }\r\n  }\r\n\r\n\r\n  const handleDoneClicked = (id: string) => {\r\n    const now = moment().valueOf();\r\n    const item = todoItems.filter(item => item.id === id)[0];\r\n\r\n    const doneItem = { ...item, isDone: true, completedDate: now };\r\n\r\n    // Prepend done item to top of list\r\n    setDoneItems([doneItem, ...doneItems]);\r\n    setTodoItems(todoItems.filter(item => item.id !== id));\r\n  }\r\n\r\n  const handleRedoClicked = (id: string) => {\r\n    const item = doneItems.filter(item => item.id === id)[0];\r\n    const redoItem = { ...item, isDone: false, completedDate: undefined };\r\n\r\n    // Prepend redo item to top of list\r\n    setTodoItems([redoItem, ...todoItems]);\r\n    setDoneItems(doneItems.filter(item => item.id !== id))\r\n  }\r\n\r\n  const numDoneVisible = doneItems.length < 10 ? doneItems.length : 10;\r\n\r\n  return (\r\n    <div className=\"main flex-container-center\">\r\n      <div className=\"todo-bar width-90\">\r\n        <InputGroup>\r\n          <FormControl\r\n            placeholder=\"What you want to do?\"\r\n            className=\"todo-input\"\r\n            onKeyPress={(e: React.KeyboardEvent) => handleAddNewTodo(e)}\r\n            onChange={(event) => setTodoValue(event.target.value)}\r\n            value={todoValue}\r\n          />\r\n          <InputGroup.Append>\r\n            <Button\r\n              disabled={!todoValue}\r\n              className=\"todo-done-button\"\r\n              onClick={handleAddTodoClicked}\r\n            >\r\n              Add\r\n          </Button>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n      </div>\r\n      <ListGroup className=\"todo-list width-90\">\r\n        {todoItems.map((item: TodoItem) =>\r\n          <ListItem item={item} handleActionClicked={handleDoneClicked} />\r\n        )}\r\n      </ListGroup>\r\n      {doneItems?.length > 0 ? <h1 className=\"done-label\">Done</h1> : null}\r\n      <ListGroup className=\"done-list width-90\">\r\n        {doneItems.slice(0, numDoneVisible).map((item: TodoItem) =>\r\n          <ListItem item={item} handleActionClicked={handleRedoClicked} />\r\n        )}\r\n      </ListGroup>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default List;","import React, { useCallback, useEffect, useRef, useState } from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './app.css';\n\nimport Toolbar from './components/Toolbar';\nimport Header from './components/Header';\nimport List, { TodoItem } from './components/List';\n\n//@ts-ignore\nconst FileSaver = require('file-saver');\n\nfunction App() {\n  /**\n   * Prevent user from leaving the page accidentally\n   */\n  useEffect(() => {\n    const confirmExit = () => \"\";\n    window.onbeforeunload = confirmExit;\n  }, [])\n\n  const [todoItems, setTodoItems] = useState<TodoItem[]>([]);\n  const [doneItems, setDoneItems] = useState<TodoItem[]>([]);\n  const inputImportRef = useRef<any>(null);\n\n  const handleImportClicked = () => {\n    inputImportRef?.current?.click();\n  }\n\n  const handleFilesUploaded = async () => {\n    const filesList = inputImportRef?.current?.files;\n    const json = await filesList[0].text();\n    const todoList = JSON.parse(json);\n    setTodoItems(todoList.filter((item: TodoItem) => !item.isDone))\n    setDoneItems(todoList.filter((item: TodoItem) => item.isDone))\n  }\n\n  /**\n   * Write the todo list to JSON file\n   */\n  const handleExportClicked = useCallback(() => {\n    const json = JSON.stringify([...doneItems, ...todoItems]);\n    const blob = new Blob([json], { type: \"text/plain;charset=utf-8\" });\n    FileSaver.saveAs(blob, \"todo.json\")\n  }, [doneItems, todoItems])\n\n  return (\n    <div className=\"app\">\n      <Toolbar\n        onImportClicked={() => handleImportClicked()}\n        onExportClicked={() => handleExportClicked()}\n      />\n      <Header />\n      <List\n        todoItems={todoItems}\n        setTodoItems={setTodoItems}\n        doneItems={doneItems}\n        setDoneItems={setDoneItems}\n      />\n      <input\n        type=\"file\"\n        className=\"input-file-import\"\n        accept=\".json\"\n        onChange={handleFilesUploaded}\n        ref={inputImportRef}\n      />\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}